// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package auth is a generated GoMock package.
package auth

import (
	repository "companies-api/internal/entities/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockIRepository) Auth(auth *repository.Auth) (*repository.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", auth)
	ret0, _ := ret[0].(*repository.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockIRepositoryMockRecorder) Auth(auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockIRepository)(nil).Auth), auth)
}
